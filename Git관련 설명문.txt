git config --global user.name "이름"
git config --global user.email "깃허브 메일주소" // 매번 물어보는 귀찮음을 피하기 위해 설정.

mkdir ~/MyProject   // 로컬 디렉토리 만들고
cd ~/myproject      // 디렉토리로 들어가서
git init            // 깃 명령어를 사용할 수 있는 디렉토리로 만든다.
git status          // 현재 상태를 훑어보고
git add 화일명.확장자  // 깃 주목 리스트에 화일을 추가하고 or
git add .           // 이 명령은 현재 디렉토리의 모든 화일을 추가할 수 있다.
git commit -m “현재형으로 설명” // 커밋해서 스냅샷을 찍는다.

git remote add origin https://github.com/username/myproject.git // 로컬과 원격 저장소를 연결한다.

git clone https://github.com/KennethanCeyer/tutorial.git  // github data 복사

git remote -v // 연결상태를 확인한다.
git push origin master // 깃허브로 푸시한다.

git checkout [브랜치명]   //예 master 
git checkout [커밋아이디]
git checkout [커밋아이디][파일명]

git checkout <과거commit id> <복원하고픈 파일명> // 해당 브랜치에서 실행

git log  // 히스토리 보기

$ git remote set-url origin git@github.com:KennethanCeyer/tutorial-git.git
   
# origin의 Remote URL이 제대로 변경됬는지 체크해주세요.
$ git remote show origin

ignore 파일이나, 삭제한 파일 이력까지 커밋을 하실 경우, -f 옵션을 이용합니다.
$ git add . -f


$ git add *
$ git commit -m "UI 레이아웃 이슈 수정."

# 수정사항 발생
$ git add *
$ git commit -m "UI 레이아웃 이슈 수정 및 관리자 벨리데이션 추가." --amend

# master 브랜치를 pull하여 업데이트
$ git pull origin master
  
# master 브랜치를 fetch하여 업데이트
$ git fetch origin master


// --soft --hard --mixed
# 바로 이전 단계로 인덱스와 워킹트리를 버리고 리셋.
$ git reset HEAD^ --hard 
    
# 바로 두번째 전 단계로 인덱스와 워킹트리를 버리고 리셋.
$ git reset HEAD~2 --hard 
    
# 특정 리비전의 기록으로 인덱스는 버리고 워킹트리를 보존하여 리셋.
$ git reset 991ee8c --mixed

브랜치
git branch [브랜치명]
git checkout [브랜치명] //해당 브랜치로 이동하기
git checkout -b [브랜치명] // 위의 두작업 동시에 처리

git checkout [브랜치명] // 해당 브랜치로 이동 
git push orign [브랜치명] // 생성한 브랜치명 원격 저장소에 등록

브랜치 삭제
로컬
git branch -D [삭제할 브랜치명] // master위치에서 실행
git push origin :[삭제할 브랜치명] // 원격지 브랜치 삭제

소스병합
git merge, git rebase

git checkout -f master
git merge [머지 대상 브랜치]

머지이후 master파일에서 확인 가능
머지시 충돌발생

둘 모두 버전이 같으나 같은 라인에서 변경사항이 발생했습니다.
이 경우 충돌이 발생합니다.

* 머지 이후 master -> some_file.txt (충돌)
<<<<<<< HEAD
Strawberry
=======
Banana
>>>>>>> sub

여기서 HEAD는 현재 브랜치(master)를 의미합니다.
HEAD와 sub의 각각 내용을 보여주고 있는데 꺽쇠(<, >), 이퀄(=)기호가 없도록 문장 하나를 선택해서 반영해주어야
충돌이 해결 될 수 있습니다.
여기서는 master 브랜치의 Strawberry를 선택하여 충돌을 해결하겠습니다.

수정 후 
git add *
git commit -m "Solved the conflict issue"





